import dotenv from 'dotenv';

dotenv.config();
const PORT = process.env.PORT || 5001;

const swaggerDefinition = {
  openapi: '3.0.0',
  info: {
    title: 'Ziutki Gym API',
    version: '1.0.0',
    description: 'API documentation for Ziutki Gym generated by swagger-jsdoc',
  },
  servers: [
    {
      url: `http://localhost:${PORT}/api`,
    },
  ],
  tags: [
    { name: "Auth", description: "Authentication and Users" },
    { name: "Exercises" },
    { name: "Workouts" }
  ],
  components: {
    schemas: {
      SignupInput: {
        type: "object",
        required: ["username", "email", "password"],
        properties: {
          username: { type: "string", example: "user123" },
          email: { type: "string", format: "email", example: "user@example.com" },
          password: { type: "string", format: "password", example: "password123" }
        }
      },
      LoginInput: {
        type: "object",
        required: ["email", "password"],
        properties: {
          email: { type: "string", format: "email", example: "user@example.com" },
          password: { type: "string", format: "password", example: "password123" }
        }
      },
      UserResponse: {
        type: "object",
        properties: {
          _id: { type: "string", example: "60d..." },
          username: { type: "string", example: "user123" },
          email: { type: "string", format: "email", example: "user@example.com" },
          profilePic: { type: "string", example: "http://..." },
          bio: { type: "string", example: "I love Ziutki Gym" }
        }
      },
      UpdateProfileInput: {
        type: "object",
        properties: {
          username: { type: "string", example: "nowy_user" },
          profilePic: { type: "string", description: "image URL", example: "data:image/png;base64,..." },
          bio: { type: "string", maxLength: 200, example: "New bio" }
        }
      },
      UpdatePasswordInput: {
        type: "object",
        required: ["currentPassword", "newPassword"],
        properties: {
          currentPassword: { type: "string", format: "password", example: "password123" },
          newPassword: { type: "string", format: "password", example: "password123456" }
        }
      },
      Exercise: {
        type: "object",
        properties: {
          _id: { type: "string" },
          exercise_id: { type: "string" },
          title: { type: "string" },
          type: { type: "string", enum: ["weight_reps", "time_based", "bodyweight"] },
          muscle_groups: {
            type: "object",
            properties: {
              primary: { type: "string" },
              secondary: { type: "array", items: { type: "string" } }
            }
          },
          difficulty: { type: "string", enum: ["beginner", "intermediate", "advanced"] },
          equipment: { type: "array", items: { type: "string" } },
          instructions: { type: "array", items: { type: "string" } },
          video_url: { type: "string" },
          is_custom: { type: "boolean" }
        }
      },
      WorkoutSet: {
        type: "object",
        required: ["weight", "reps"],
        properties: {
          weight: { type: "number", minimum: 0, example: 50 },
          reps: { type: "number", minimum: 1, example: 10 }
        }
      },
      WorkoutExerciseInput: {
        type: "object",
        required: ["exercise", "sets"],
        properties: {
          exercise: { type: "string", description: "exercise ID", example: "60d..." },
          sets: { type: "array", items: { $ref: "#/components/schemas/WorkoutSet" } }
        }
      },
      WorkoutInput: {
        type: "object",
        required: ["exercises", "startTime", "endTime", "title"],
        properties: {
          title: { type: "string", example: "Trening klaty" },
          startTime: { type: "string", format: "date-time", example: "2025-04-09T18:00:00Z" },
          endTime: { type: "string", format: "date-time", example: "2025-04-09T19:00:00Z" },
          exercises: { type: "array", items: { $ref: "#/components/schemas/WorkoutExerciseInput" } }
        }
      },
      WorkoutExerciseDetail: {
        type: "object",
        properties: {
          _id: { type: "string", description: "exercise ID" },
          exercise: { $ref: "#/components/schemas/Exercise" },
          sets: { type: "array", items: { $ref: "#/components/schemas/WorkoutSet" } }
        }
      },
      WorkoutDetail: {
        type: "object",
        properties: {
          _id: { type: "string" },
          user: { type: "string", description: "user ID" },
          exercises: { type: "array", items: { $ref: "#/components/schemas/WorkoutExerciseDetail" } },
          startTime: { type: "string", format: "date-time" },
          duration: { type: "number", description: "Duration in minutes" },
          title: { type: "string" },
          createdAt: { type: "string", format: "date-time" },
          updatedAt: { type: "string", format: "date-time" }
        }
      },
      ErrorResponse: {
        type: "object",
        properties: {
          error: { type: "string", example: "Error message" },
          status: { type: "number", example: 400 }
        }
      },
      UpdateUserInput: {
        type: "object",
        properties: {
          username: { type: "string", example: "updatedUser" },
          role: { type: "string", enum: ["user", "admin"], example: "admin" }
        }
      },
      Comment: {
        type: "object",
        properties: {
          _id: { type: "string", example: "60d..." },
          user: { $ref: "#/components/schemas/UserResponse" },
          workout: { type: "string", description: "ID of the workout", example: "60c..." },
          content: { type: "string", example: "Great workout!" },
          createdAt: { type: "string", format: "date-time" },
          updatedAt: { type: "string", format: "date-time" }
        }
      }
    }
  }
};

const options = {
  swaggerDefinition,
  apis: ['./src/routes/*.js'],
};

export default options;